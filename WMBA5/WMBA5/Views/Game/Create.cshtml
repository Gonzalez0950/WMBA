@model WMBA5.Models.Game

@{
    ViewData["Title"] = "Create Game";
}

<h1>Create Game</h1>
<partial name="_addLocationModal" />
<div class="row">

    <div class="col-md-4">
        <form asp-action="Create" method="post">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="StartTime" class="control-label"></label>
                <input asp-for="StartTime" class="form-control" />
                <span asp-validation-for="StartTime" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="DivisionID" class="control-label"></label>
                <select asp-for="DivisionID" class="form-control" asp-items="ViewBag.DivisionID"></select>
            </div>
            <div class="form-group">
                <label class="control-label">Home Team</label>
                @Html.DropDownList("HomeTeamID", (SelectList)ViewBag.Teams, "Select a Home Team", new { @class = "form-control", @style = "margin-top: 0.5rem;" })
                <span asp-validation-for="HomeTeamID" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label class="control-label">Away Team</label>
                @Html.DropDownList("AwayTeamID", (SelectList)ViewBag.Teams, "Select an Away Team", new { @class = "form-control", @style = "margin-top: 0.5rem;" })
                <span asp-validation-for="AwayTeamID" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="LocationID" class="control-label"></label>
                <div class="input-group mb-3">
                    <div class="input-group-prepend">
                        <button class="btn btn-outline-secondary" id="nowAddLocation" data-bs-toggle="modal" data-bs-target="#addLocationModal" type="button">&#x2795;</button>
                    </div>
                    <select asp-for="LocationID" class="form-control" asp-items="ViewBag.LocationID">
                        <option value="">None</option>
                    </select>
                </div>
            </div>
            <div class="form-group">
                <label asp-for="OutcomeID" class="control-label"></label>
                <select asp-for="OutcomeID" class="form-control" asp-items="ViewBag.OutcomeID"></select>
                <span asp-validation-for="OutcomeID" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
        </form>
    </div>

</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>


@* @section Scripts{
	@{
		await Html.RenderPartialAsync("_ValidationScriptsPartial");
	}
	<script src="~/js/refreshDDL.js"></script>
	<script type="text/javascript">
		$('#DivisionID').change(function () {
			var selectedDivision = $("#DivisionID").val();
			var URL = "/Game/GetGame/?DivisionID=" + selectedDivision;
			refreshDDL('TeamID', URL, true, 'Select a Division with teams first', false, null, true);
		});
	</script>
} *@



@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    @* <script src="~/js/multiselect.js"></script> *@
    <script src="~/js/refreshDDL.js"></script>

    <script type="text/javascript">
        $('#submitLocationCreate').click(function (event) {
            event.preventDefault();
            ClearErrors();
            var form = $('#createLocationForm');
            if (form.valid()) {
                $.ajax({
                    type: "POST",
                    url: form.attr('action'),
                    data: form.serialize(),
                    success: function () {
                        $('#addLocationModal').modal('hide');
                    },
                    error: function (xhr) { //Note: xhr is the XMLHttpRequest
                        var errorMessages = [];
                        switch (xhr.status) {
                            case 401:
                                errorMessages.push("You must be logged in first.");
                                break;
                            case 403:
                                errorMessages.push("You are not authorized for this action.");
                                break;
                            default:
                                //Messages coming from the Model State Errors
                                //We split on the | delimeter and the .slice removes the last one
                                errorMessages = xhr.responseText.split("|").slice(0, -1);
                        }
                        //This checks if there are any elements with some content
                        //and if not then it provides a default feedback message.
                        if (!errorMessages.some((str) => str !== "")) {
                            errorMessages.push("Error: Unable to complete operation");
                        }
                        //Put the messages in the ErrorList ul contained in the 'ValidaitonSummary' div.
                        var ul = document.getElementById("ErrorList");
                        for (var i = 0; i < errorMessages.length; i++) {
                            var errorMessage = errorMessages[i];
                            var li = document.createElement("li");
                            li.innerHTML = errorMessage;
                            ul.appendChild(li);
                        }
                    }
                });
            }
            return false;
        });
        $('#addLocationModal').on('hide.bs.modal', function () {
            document.getElementById("createLocationForm").reset();//to clear the data in the popup form
            ClearErrors();
            var selectedOption = $('#LocationID').val();//Return to the current selected value
            refreshDDL('LocationID', '/Game/GetLocations/' + selectedOption, false, null, true, 'None', true);
        });
        function ClearErrors() {
            //Empty out the list of validation errors if there are any
            var ul = document.getElementById("ErrorList");
            while (ul.firstChild) {
                ul.removeChild(ul.firstChild);
            }
        }
        $('#DivisionID').change(function () {
            var selectedDivision = $("#DivisionID").val();
            var URL = "/Game/GetGame/?DivisionID=" + selectedDivision;
            refreshDDL('TeamID', URL, true, 'Select a Division with teams first', false, null, true);
        });
        $(document).ready(function () {
            $("#createGameForm").submit(function (e) {
                var selectedDivisionID = $("#DivisionID").val();
                var selectedHomeTeamID = $("#HomeTeamID").val();
                var selectedAwayTeamID = $("#AwayTeamID").val();

                // Fetch division IDs for selected teams via AJAX or use hidden fields populated on the server-side
                var homeTeamDivisionID; // Set this based on your AJAX response or hidden field value
                var awayTeamDivisionID; // Set this based on your AJAX response or hidden field value

                if (selectedDivisionID !== homeTeamDivisionID || selectedDivisionID !== awayTeamDivisionID) {
                    e.preventDefault(); // Prevent form submission
                    alert("The selected teams must belong to the selected game's division.");
                }
            });
        });

    </script>

}


