@model WMBA5.Models.Game

@{
    ViewData["Title"] = "Create Game";
}

<link rel="stylesheet" href="css/Layout.css">
<div class="d-flex justify-content-between align-items-center">
    <div class="d-flex align-items-center">
        <div style="margin-right: 10px;">
            <h2>Create Game</h2>
        </div>
        <button type="button" class="btn btn-info help-btn" id="helpBtn" data-bs-toggle="popover" data-bs-placement="right"
                data-bs-content="<p>1- In the &quot;Create Game&quot; page, you can enter all the necessary information of the game like Date, Division name, Home Team, Away Team and Location.</p>
                       <p>2- Once finished entering the necessary information, click on the &quot;Create&quot; button to add that game.</p>"
                data-bs-html="true">
            ?
        </button>
    </div>
</div>

<partial name="_addLocationModal" />
<div class="row">

    <div class="col-md-5">
        <form asp-action="Create" method="post">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="StartTime" class="control-label"></label>
                <input asp-for="StartTime" class="form-control" />
                <span asp-validation-for="StartTime" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="DivisionID" class="control-label"></label>
                <select asp-for="DivisionID" class="form-control" asp-items="ViewBag.DivisionID"></select>
                <span asp-validation-for="DivisionID" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label class="control-label">Home Team</label>
                @Html.DropDownList("HomeTeamID", (SelectList)ViewBag.Teams, "Select a Home Team", new { @class = "form-control", @style = "margin-top: 0.5rem;" })
                <span asp-validation-for="HomeTeamID" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label class="control-label">Away Team</label>
                @Html.DropDownList("AwayTeamID", (SelectList)ViewBag.Teams, "Select an Away Team", new { @class = "form-control", @style = "margin-top: 0.5rem;" })
                <span asp-validation-for="AwayTeamID" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="LocationID" class="control-label"></label>
                <div class="input-group mb-3">
                    <div class="input-group-prepend">
                        <button class="btn btn-outline-secondary" id="nowAddLocation" data-bs-toggle="modal" data-bs-target="#addLocationModal" type="button">&#x2795;</button>
                    </div>
                    <select asp-for="LocationID" class="form-control" asp-items="ViewBag.LocationID">
                        <option value="">None</option>
                    </select>
                </div>
            </div>

            <div class="form-group">
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
        </form>
    </div>

</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>


@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    @* <script src="~/js/multiselect.js"></script> *@
    <script src="~/js/refreshDDL.js"></script>

    <script>
        $(document).ready(function () {
            // Trigger the change event to load teams for the default division (9U)
            $('#DivisionID').change();

            // Bind change event handler
            $('#DivisionID').change(function () {
                var selectedDivisionId = $(this).val();
                // Send AJAX request to retrieve teams for the selected division
                $.ajax({
                    url: '@Url.Action("GetTeamsByDivision", "Game")',
                    type: 'GET',
                    data: { divisionId: selectedDivisionId },
                    success: function (data) {
                        console.log(data); // Debugging statement
                        // Update home team and away team dropdown lists
                        var options = '';
                        if (data.$values.length > 0) {
                            options += '<option value="">Select a Team</option>'; // Add "Select a Team" option
                            $.each(data.$values, function (index, team) {
                                options += '<option value="' + team.value + '">' + team.text + '</option>';
                            });
                        } else {
                            options += '<option value="" selected>No teams for this division. Please select another division.</option>'; // Default to "No teams"
                        }
                        $('#HomeTeamID, #AwayTeamID').html(options);
                    },
                    error: function (xhr, textStatus, errorThrown) {
                        console.log(xhr.responseText); // Debugging statement
                        console.log(textStatus); // Debugging statement
                        console.log(errorThrown); // Debugging statement
                    }
                });
            }).change();
        });

        // Function to reload the page
        function reloadPage() {
            location.reload();
        }

        // Handle click event of Create button inside _addLocationModal
        $('#submitLocationCreate').click(function (event) {
            event.preventDefault();
            ClearErrors();
            var form = $('#createLocationForm');
            if (form.valid()) {
                $.ajax({
                    type: "POST",
                    url: form.attr('action'),
                    data: form.serialize(),
                    success: function () {
                        $('#addLocationModal').modal('hide');
                        reloadPage(); // Reload the page after successful submission
                    },
                    error: function (xhr) { //Note: xhr is the XMLHttpRequest
                        var errorMessages = [];
                        switch (xhr.status) {
                            case 401:
                                errorMessages.push("You must be logged in first.");
                                break;
                            case 403:
                                errorMessages.push("You are not authorized for this action.");
                                break;
                            default:
                                //Messages coming from the Model State Errors
                                //We split on the | delimeter and the .slice removes the last one
                                errorMessages = xhr.responseText.split("|").slice(0, -1);
                        }
                        //This checks if there are any elements with some content
                        //and if not then it provides a default feedback message.
                        if (!errorMessages.some((str) => str !== "")) {
                            errorMessages.push("Error: Unable to complete operation");
                        }
                        //Put the messages in the ErrorList ul contained in the 'ValidaitonSummary' div.
                        var ul = document.getElementById("ErrorList");
                        for (var i = 0; i < errorMessages.length; i++) {
                            var errorMessage = errorMessages[i];
                            var li = document.createElement("li");
                            li.innerHTML = errorMessage;
                            ul.appendChild(li);
                        }
                    }
                });
            }
            return false;
        });
        $('#addLocationModal').on('hide.bs.modal', function () {
            document.getElementById("createLocationForm").reset();//to clear the data in the popup form
            ClearErrors();
            var selectedOption = $('#LocationID').val();//Return to the current selected value
            refreshDDL('LocationID', '/Game/GetLocations/' + selectedOption, false, null, true, 'None', true);
        });
        function ClearErrors() {
            //Empty out the list of validation errors if there are any
            var ul = document.getElementById("ErrorList");
            while (ul.firstChild) {
                ul.removeChild(ul.firstChild);
            }
        }
        $('#DivisionID').change(function () {
            var selectedDivision = $("#DivisionID").val();
            var URL = "/Game/GetGame/?DivisionID=" + selectedDivision;
            refreshDDL('TeamID', URL, true, 'Select a Division with teams first', false, null, true);
        });
        $(document).ready(function () {
            $("#createGameForm").submit(function (e) {
                var selectedHomeTeamID = $("#HomeTeamID").val();
                var selectedAwayTeamID = $("#AwayTeamID").val();

                // Fetch division IDs for selected teams via AJAX or use hidden fields populated on the server-side
                var homeTeamDivisionID; // Set this based on your AJAX response or hidden field value
                var awayTeamDivisionID; // Set this based on your AJAX response or hidden field value

                if (selectedDivisionID !== homeTeamDivisionID || selectedDivisionID !== awayTeamDivisionID) {
                    e.preventDefault(); // Prevent form submission
                    alert("The selected teams must belong to the selected game's division.");
                }
            });
        });
        // Initialize popover with trigger set to 'hover'
        var popoverTriggerListHover = [].slice.call(document.querySelectorAll('[data-bs-toggle="popover"]'))
        var popoverListHover = popoverTriggerListHover.map(function (popoverTriggerEl) {
            return new bootstrap.Popover(popoverTriggerEl, {
                trigger: 'hover' // Show popover on hover
            });
        });

        // Initialize popover with trigger set to 'click'
        var popoverTriggerListClick = [].slice.call(document.querySelectorAll('[data-bs-toggle="popover"]'))
        var popoverListClick = popoverTriggerListClick.map(function (popoverTriggerEl) {
            return new bootstrap.Popover(popoverTriggerEl, {
                trigger: 'click' // Show popover on click
            });
        });
    </script>
}


