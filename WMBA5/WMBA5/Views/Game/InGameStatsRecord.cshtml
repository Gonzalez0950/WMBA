@model WMBA5.Models.Game

@{
    ViewData["Title"] = "Record Game";
}
<link rel="stylesheet" href="~/css/Layout.css" asp-append-version="true" />
@* <partial name="_ViewHeading" /> *@
<h2>@Html.DisplayFor(model => model.HomeTeam.TeamName) vs @Html.DisplayFor(model => model.AwayTeam.TeamName)</h2>
<hr />
<form asp-action="InGam eStatsRecord" >
    <input type="hidden" value="@ViewBag.GameID" id="gameID" />

    <label id="lblLineup">Current Team: <span id="TeamLineup">@ViewBag.TeamLineup</span></label>
    <br />
    <button id="changeTeam">Change Team</button>
    <div class="score-body-grid">
                <div class="score-table">
                            <div class="score-cont" style="display:flex; width:330px;">
                                <div style="width:80%">
                                    <label id="lblSelectedPlayer" class="player-atbat">Player: </label>
                                    <br />
                                    <label id="lblHit" name="lblHit" class="fw-bold" for="btnHit">Hit: </label>
                                    <br />
                                    <button id="btnHit" name="btnHit" class="score-plus-btn">+</button>
                                    <select id="selectHit">
                                        <option value="1">Single</option>
                                        <option value="2">Double</option>
                                        <option value="3">Triple</option>
                                    </select>
                                    <button id="btnHitUndo" name="btnHitUndo" class="score-plus-btn"> - </button>
                                    <br />
                                    <label id="lblRun" name="lblRun" class="fw-bold" for="btnRunUndo">Run: </label>
                                    <br />
                                    <button id="btnRun" name="btnRun" class="score-btn"> + </button>
                                    <button id="btnRunUndo" name="btnRunUndo" class="score-plus-btn">-</button>
                                    <br />
                                    <label id="lblHomeRun" name="lblHomeRun" class="fw-bold" for="btnHomeRun">Home Run: </label>
                                    <br />
                                    <button id="btnHomeRun" name="btnRun" class="score-btn"> +</button>
                                    <br />
                                    <label id="lblOut" for="btnOut" class="fw-bold">Out: </label>
                                    <br />
                                    <button id="btnOut" name="btnOut" class="score-plus-btn">+</button>
                                    <button id="btnOutUndo" name="btnOutUndo" class="score-plus-btn"> - </button>
                                    <br />
                                </div>
                               
                                <div class="score-left-col">
                                    <div class="score-plus-btn-ctn">
                                        <label id="lblStrike" name="lblStrike" class="fw-bold" for="btnStrike">Strike: </label>
                                        <br />
                                        <button id="btnStrike" name="btnStrike" class="score-plus-btn">+</button>
                                        <button id="btnStrikeUndo" name="btnStrikeUndo" class="score-plus-btn"> - </button>
                                        <br />
                                        <label id="lblBall" for="btnBall" class="fw-bold">Balls: @ViewBag.TotalBalls</label>
                                        <br />
                                        <button id="btnBall" name="btnBall" class="score-plus-btn">+</button>
                                        <button id="btnBallUndo" name="btnBallUndo" class="score-plus-btn"> - </button>
                                        <br />
                                        <label id="lblOut" for="btnFoul" class="fw-bold">Foul: </label>
                                        <br />
                                        <button id="btnFoul" name="btnFoul" class="score-plus-btn">+</button>
                                        <button id="btnFoulUndo" name="btnFoulUndo" class="score-plus-btn"> - </button>
                                    </div>
                                </div>
                            </div>
                    <button id="btnSave" name="btnSave">Save</button>
                    <br />
                    <button id="btnReset" name="btnReset">Reset</button>
                </div>
                <div class="score-stats">
                    <div>
                        <label id="lblTotal" style="font-size:25px">Total Score:</label>
                        <br />
                        <div>Hits: <span id="playerHits"></span></div>
                        <div>Balls: <span id="playerBalls"></span></div>
                        <div>Runs: <span id="playerRuns"></span></div>
                        <div>Strikes: <span id="playerStrikes"></span></div>
                        <div>Outs: <span id="playerOuts"></span></div>
                        <div>Foul Balls: <span id="playerFoulBalls"></span></div>
                    </div>
                </div>
                <!-- Players list box with Next and Back buttons -->
                <div class="score-players">
                    <div>
                        <label id="lblPlayer" for="selectPlayer" class="fw-bold score-lists">Players</label>
                        <br />
                        <select id="selectPlayer" Name="players" Size="10" class="score-slc-players">
                            @foreach (var item in Model.GamePlayers
                            .Where(gp=>gp.TeamLineup==TeamLineup.Home)
                            .OrderBy(o => o.BattingOrder))
                            {
                                <option value="@item.PlayerID" data-name="@item.Player.FullName">@item.BattingOrder - @item.Player.FullName</option>
                                <br />
                            }
                        </select>
                        <div>
                        <button type="button" id="prevPlayer" onclick="changePlayer(-1)">Back</button>
                        <button type="button" id="nextPlayer" onclick="changePlayer(1)">Next</button>
                        </div>
                    </div>
                    <div>
                            <label id="lblInning" for="selectInning" class="fw-bold score-lists">Innings</label>
                            <br />
                            <select id="selectInning" Name="innings" Size="9" class="score-slc-innings">
                            @foreach (var item in ViewBag.Innings)
                            {
                                <option value="@item.ID">@item.InningNo</option>
                                <br />
                            }
                            </select>
                            <div>
                                <button type="button" id="prevInning" onclick="changeInning(-1)">Back</button>
                                <button type="button" id="nextInning" onclick="changeInning(1)">Next</button>
                            </div>
                    </div>
                </div>
    </div>
</form>


@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
<script type="text/javascript">
    let boolChangedState = false;
        // Define the named function
        async function fetchGameInfo() {
            try {
                var data = await (async () => {
                    return new Promise((resolve, reject) => {
                        let data = { id: @ViewBag.GameID};
                        $.ajax({
                            type: "GET",
                            url: "@Url.Action("GetGameInfo", "Game")",
                            data: data,
                            success: function (data) {
                                console.log(data);
                                resolve(data);
                            },
                            error: function (xhr) {
                                var errorMessages = [];
                                switch (xhr.status) {
                                    case 401:
                                        errorMessages.push("You must be logged in first.");
                                        break;
                                    case 403:
                                        errorMessages.push("You are not authorized for this action.");
                                        break;
                                    default:
                                        errorMessages = xhr.responseText.split("|").slice(0, -1);
                                }
                                reject(errorMessages);
                            }
                        });
                    });
                })();

                var jsonData = JSON.parse(data);
                gameInfoJson = jsonData; // Assign the resolved data to the variable
                setPlayerScores();
            } catch (error) {
                console.error(error); // Handle errors if any
            }
        }
        let selectRuns = document.querySelector("#selectRuns")
        let selectInning = document.querySelector("#selectInning")
        let selectPlayer = document.querySelector("#selectPlayer")

        changePlayer(1)
        changeInning(1)

        let setPlayerScores = () => {
            let selectedPlayerID = selectPlayer.value;
            let selectedInningID = selectInning.value;
            let team = gameInfoJson.GamePlayers.filter(gp => gp.TeamLineup === 0);

            let player = gameInfoJson.GamePlayers.find(gp => gp.PlayerID == selectedPlayerID).Player
            let score = player.Scores.find(p => p.InningID == selectedInningID && p.GameID == @ViewBag.GameID)


            let totalRuns = 0;

            team.forEach(gamePlayer => {
                let playerScore = 0;
                if (gamePlayer.Player.Scores.length != 0) 
                {
                    playerScore = gamePlayer.Player.Scores.reduce((total, score) => {
                        // Add the total runs to each score object
           
                        total = total + score.Runs
                        return total;
                    }, 0);
                  
                }

                totalRuns += playerScore;
            });
         
    
            if (score == undefined || player.Scores.length == 0) {
                document.querySelector("#playerHits").innerHTML = 0
                document.querySelector("#playerBalls").innerHTML = 0
                document.querySelector("#playerRuns").innerHTML = 0
                document.querySelector("#playerStrikes").innerHTML = 0
                document.querySelector("#playerFoulBalls").innerHTML = 0
                document.querySelector("#playerOuts").innerHTML = 0
            }
            else {
                document.querySelector("#playerHits").innerHTML = score["Hits"];
                document.querySelector("#playerBalls").innerHTML = score["Balls"]
                document.querySelector("#playerRuns").innerHTML = score["Runs"]
                document.querySelector("#playerStrikes").innerHTML = score["Strikes"]
                document.querySelector("#playerFoulBalls").innerHTML = score["FoulBalls"]
                document.querySelector("#playerOuts").innerHTML = score["Out"]
            }
            document.querySelector("#lblTotal").innerHTML = `Total Score: ${totalRuns}`;;
            document.getElementById("lblSelectedPlayer").innerHTML = $("#selectPlayer option:selected").text().replace(/^\d+\s*-\s*/, '');
        }
        let gameInfoJson = fetchGameInfo()

        $("#btnHit").click(function (event) {
            event.preventDefault();
            // Getting selected player and inning IDs
            let selectedPlayerID = selectPlayer.value;
            let selectedInningID = selectInning.value;
            let hitValue = parseInt(document.querySelector("#selectHit").value);
            // Checking if both player and inning are selected
            if (selectedPlayerID === "" || selectedInningID === "") {
                alert("Please select a player and an inning.");
                return;
            }
            else {

                let data = { GameID: @ViewBag.GameID, PlayerID: selectedPlayerID, InningID: selectedInningID }
                let player = gameInfoJson.GamePlayers.find(gp => gp.PlayerID == selectedPlayerID).Player
                let score = player.Scores.find(p => p.InningID == selectedInningID && p.GameID == @ViewBag.GameID)

                if (player.Scores.length == 0 || score == undefined) {
                    $.ajax({
                        type: "POST",
                        url: "@Url.Action("NewScoreObject", "Game")",
                        data: data,
                        success: function (data) {
                            let jsonData = JSON.parse(data)
                            jsonData.Hits += hitValue;;
                            player.Scores.push(jsonData)
                            setPlayerScores()
                        },
                        error: function () {
                            alert("ERROR");
                        }
                    });
                }
                else {
                    score.Hits += hitValue;
                }
                setPlayerScores();
                boolChangedState = true;

            }
            return false;
        });
        $("#btnHitUndo").click(function (event) {
            event.preventDefault();
            // Getting selected player and inning IDs
            let selectedPlayerID = selectPlayer.value;
            let selectedInningID = selectInning.value;
            let hits = document.querySelector("#playerHits").innerHTML
            let hitValue = parseInt(document.querySelector("#selectHit").value);
            if (parseInt(hits) == 0) { alert("Hits are already zero"); return; }
            if (hits - hitValue < 0) { alert("You cannot have hits below or equal to zero"); return; }
            // Checking if both player and inning are selected
            if (selectedPlayerID === "" || selectedInningID === "") {
                alert("Please select a player and an inning.");
                return;
            }
            else {

                let data = { GameID: @ViewBag.GameID, PlayerID: selectedPlayerID, InningID: selectedInningID }
                let player = gameInfoJson.GamePlayers.find(gp => gp.PlayerID == selectedPlayerID).Player
                let score = player.Scores.find(p => p.InningID == selectedInningID && p.GameID == @ViewBag.GameID)

                if (player.Scores.length == 0 || score == undefined) {
                    console.log(score)
                    $.ajax({
                        type: "POST",
                        url: "@Url.Action("NewScoreObject", "Game")",
                        data: data,
                        success: function (data) {
                            let jsonData = JSON.parse(data)
                            jsonData.Hits -= hitValue;
                            player.Scores.push(jsonData)
                            setPlayerScores()
                        },
                        error: function () {
                            alert("ERROR");
                        }
                    });
                }
                else {
                    score.Hits -= hitValue;
                }
                setPlayerScores();
            }
            boolChangedState = true;
                return false;
            });

        $("#btnFoul").click(function (event) {
            event.preventDefault();
            // Getting selected player and inning IDs
            let selectedPlayerID = selectPlayer.value;
            let selectedInningID = selectInning.value;
            // Checking if both player and inning are selected
            if (selectedPlayerID === "" || selectedInningID === "") {
                alert("Please select a player and an inning.");
                return;
            }
            else {

                let data = { GameID: @ViewBag.GameID, PlayerID: selectedPlayerID, InningID: selectedInningID }
                let player = gameInfoJson.GamePlayers.find(gp => gp.PlayerID == selectedPlayerID).Player
                let score = player.Scores.find(p => p.InningID == selectedInningID && p.GameID == @ViewBag.GameID)
                if (player.Scores.length == 0 || score == undefined) {
                    $.ajax({
                        type: "POST",
                        url: "@Url.Action("NewScoreObject", "Game")",
                        data: data,
                        success: function (data) {
                            let jsonData = JSON.parse(data)
                            jsonData.FoulBalls++;
                            player.Scores.push(jsonData)
                            setPlayerScores()
                        },
                        error: function () {
                            alert("ERROR");
                        }
                    });
                }
                else {
                    score.FoulBalls++;
                }
                setPlayerScores();
                boolChangedState = true;
            }
            return false;
        });
        $("#btnFoulUndo").click(function (event) {
            event.preventDefault();
            // Getting selected player and inning IDs
            let selectedPlayerID = selectPlayer.value;
            let selectedInningID = selectInning.value;
            let fouls = document.querySelector("#playerFoulBalls").innerHTML;
           
            // Checking if both player and inning are selected
            if (selectedPlayerID === "" || selectedInningID === "") {
                alert("Please select a player and an inning.");
                return;
            }
            if (parseInt(fouls) == 0) { alert("Fouls are already zero"); return; }
            else {

                let data = { GameID: @ViewBag.GameID, PlayerID: selectedPlayerID, InningID: selectedInningID }
                let player = gameInfoJson.GamePlayers.find(gp => gp.PlayerID == selectedPlayerID).Player
                let score = player.Scores.find(p => p.InningID == selectedInningID && p.GameID == @ViewBag.GameID)
                if (player.Scores.length == 0 || score == undefined) {
                    $.ajax({
                        type: "POST",
                        url: "@Url.Action("NewScoreObject", "Game")",
                        data: data,
                        success: function (data) {
                            let jsonData = JSON.parse(data)
                            jsonData.FoulBalls--;
                            player.Scores.push(jsonData)
                            setPlayerScores()
                        },
                        error: function () {
                            alert("ERROR");
                        }
                    });
                }
                else {
                    score.FoulBalls--;
                }
                setPlayerScores();
                boolChangedState = true;
            }
            return false;
        });

        $("#btnHomeRun").click(function (event) {
            event.preventDefault();

            // Getting selected player and inning IDs
            let selectedPlayerID = selectPlayer.value;
            let selectedInningID = selectInning.value;

            // Checking if both player and inning are selected
            if (selectedPlayerID === "" || selectedInningID === "") {
                alert("Please select a player and an inning.");
                return;
            }
            else {

                let data = { GameID: @ViewBag.GameID, PlayerID: selectedPlayerID, InningID: selectedInningID }
                let player = gameInfoJson.GamePlayers.find(gp => gp.PlayerID == selectedPlayerID).Player
                let score = player.Scores.find(p => p.InningID == selectedInningID && p.GameID == @ViewBag.GameID)

                let runs = 0
                runs = prompt("Please enter the number of runs (between 1 and 4) scored with this home run", "");
                if (runs == null) {
                    return;
                }
                let runsInt = parseInt(runs)
                if (isNaN(runsInt)) {
                    alert("The input only takes numeric values between 1 and 4")
                    return;
                }

                while ((runsInt < 1 || runsInt > 4)) {
                    runsInt = parseInt(prompt("Please enter the number of runs (between 1 and 4) scored with this home run", ""));
                }
                if (player.Scores.length == 0 || score == undefined) {
                    $.ajax({
                        type: "POST",
                        url: "@Url.Action("NewScoreObject", "Game")",
                        data: data,
                        success: function (data) {
                            let jsonData = JSON.parse(data)
                            jsonData.Runs += runsInt;
                            player.Scores.push(jsonData)
                            setPlayerScores()
                        },
                        error: function () {
                            alert("ERROR");
                        }
                    });
                }
                else {
                    score.Runs += runsInt
                }
                setPlayerScores();
                boolChangedState = true;
            }
            return false;
        });

        $("#btnBall").click(function (event) {
            event.preventDefault();
            // Getting selected player and inning IDs
            let selectedPlayerID = selectPlayer.value;
            let selectedInningID = selectInning.value;

            // Checking if both player and inning are selected
            if (selectedPlayerID === "" || selectedInningID === "") {
                alert("Please select a player and an inning.");
                return;
            }
            else {

                let data = { GameID: @ViewBag.GameID, PlayerID: selectedPlayerID, InningID: selectedInningID }
                let player = gameInfoJson.GamePlayers.find(gp => gp.PlayerID == selectedPlayerID).Player
                let score = player.Scores.find(p => p.InningID == selectedInningID && p.GameID == @ViewBag.GameID)
                if (player.Scores.length == 0 || score == undefined) {
                    $.ajax({
                        type: "POST",
                        url: "@Url.Action("NewScoreObject", "Game")",
                        data: data,
                        success: function (data) {
                            let jsonData = JSON.parse(data)
                            jsonData.Balls++;
                            player.Scores.push(jsonData)
                            setPlayerScores()
                        },
                        error: function () {
                            alert("ERROR");
                        }
                    });
                }
                else {
                    score.Balls++;
                }
                setPlayerScores();
                boolChangedState = true;
            }
            return false;
        });
        $("#btnBallUndo").click(function (event) {
            event.preventDefault();
            // Getting selected player and inning IDs
            let selectedPlayerID = selectPlayer.value;
            let selectedInningID = selectInning.value;
            let balls = document.querySelector("#playerBalls").innerHTML;
            // Checking if both player and inning are selected
            if (selectedPlayerID === "" || selectedInningID === "") {
                alert("Please select a player and an inning.");
                return;
            }
            if (parseInt(balls) == 0) { alert("Balls are already zero"); return; }
            else {

                let data = { GameID: @ViewBag.GameID, PlayerID: selectedPlayerID, InningID: selectedInningID }
                let player = gameInfoJson.GamePlayers.find(gp => gp.PlayerID == selectedPlayerID).Player
                let score = player.Scores.find(p => p.InningID == selectedInningID && p.GameID == @ViewBag.GameID)
                if (player.Scores.length == 0 || score == undefined) {
                    $.ajax({
                        type: "POST",
                        url: "@Url.Action("NewScoreObject", "Game")",
                        data: data,
                        success: function (data) {
                            let jsonData = JSON.parse(data)
                            jsonData.Balls--;
                            player.Scores.push(jsonData)
                            setPlayerScores()
                        },
                        error: function () {
                            alert("ERROR");
                        }
                    });
                }
                else {
                    score.Balls--;
                }
                setPlayerScores();
                boolChangedState = true;
            }
            return false;
        });

        $("#btnStrike").click(function (event) {
            event.preventDefault();
            // Getting selected player and inning IDs
            let selectedPlayerID = selectPlayer.value;
            let selectedInningID = selectInning.value;

            // Checking if both player and inning are selected
            if (selectedPlayerID === "" || selectedInningID === "") {
                alert("Please select a player and an inning.");
                return;
            }
            else {

                let data = { GameID: @ViewBag.GameID, PlayerID: selectedPlayerID, InningID: selectedInningID }
                let player = gameInfoJson.GamePlayers.find(gp => gp.PlayerID == selectedPlayerID).Player
                let score = player.Scores.find(p => p.InningID == selectedInningID && p.GameID == @ViewBag.GameID)
                if (player.Scores.length == 0 || score == undefined) {
                    $.ajax({
                        type: "POST",
                        url: "@Url.Action("NewScoreObject", "Game")",
                        data: data,
                        success: function (data) {
                            let jsonData = JSON.parse(data)
                            jsonData.Strikes++;
                            player.Scores.push(jsonData)
                            setPlayerScores()
                        },
                        error: function () {
                            alert("ERROR");
                        }
                    });
                }
                else {
                    score.Strikes++;
                }
                setPlayerScores();
                if (score.Strikes % 3 == 0) {
                    score.Out++;
                    changePlayer(1)
                }
                boolChangedState = true;
            }
            return false;
        });
        $("#btnStrikeUndo").click(function (event) {
            event.preventDefault();
            // Getting selected player and inning IDs
            let selectedPlayerID = selectPlayer.value;
            let selectedInningID = selectInning.value;
            let strikes = document.querySelector("#playerStrikes").innerHTML
            // Checking if both player and inning are selected
            if (selectedPlayerID === "" || selectedInningID === "") {
                alert("Please select a player and an inning.");
                return;
            }
            if (parseInt(strikes) == 0) { alert("Strikes are already zero"); return; }
            else {

                let data = { GameID: @ViewBag.GameID, PlayerID: selectedPlayerID, InningID: selectedInningID }
                let player = gameInfoJson.GamePlayers.find(gp => gp.PlayerID == selectedPlayerID).Player
                let score = player.Scores.find(p => p.InningID == selectedInningID && p.GameID == @ViewBag.GameID)
                if (player.Scores.length == 0 || score == undefined) {
                    $.ajax({
                        type: "POST",
                        url: "@Url.Action("NewScoreObject", "Game")",
                        data: data,
                        success: function (data) {
                            let jsonData = JSON.parse(data)
                            jsonData.Balls--;
                            player.Scores.push(jsonData)
                            setPlayerScores()
                        },
                        error: function () {
                            alert("ERROR");
                        }
                    });
                }
                else {
                    score.Balls--;
                }
                setPlayerScores();
                boolChangedState = true;
            }
            return false;
        });


        $("#btnOut").click(function (event) {
            event.preventDefault();
            // Getting selected player and inning IDs
            let selectedPlayerID = selectPlayer.value;
            let selectedInningID = selectInning.value;

            // Checking if both player and inning are selected
            if (selectedPlayerID === "" || selectedInningID === "") {
                alert("Please select a player and an inning.");
                return;
            }
            else {

                let data = { GameID: @ViewBag.GameID, PlayerID: selectedPlayerID, InningID: selectedInningID }
                let player = gameInfoJson.GamePlayers.find(gp => gp.PlayerID == selectedPlayerID).Player
                let score = player.Scores.find(p => p.InningID == selectedInningID && p.GameID == @ViewBag.GameID)
                if (player.Scores.length == 0 || score == undefined) {
                    $.ajax({
                        type: "POST",
                        url: "@Url.Action("NewScoreObject", "Game")",
                        data: data,
                        success: function (data) {
                            let jsonData = JSON.parse(data)
                            jsonData.Out++;
                            player.Scores.push(jsonData)
                            setPlayerScores()
                        },
                        error: function () {
                            alert("ERROR");
                        }
                    });
                }
                else {
                    score.Out++;
                }
                setPlayerScores();
                boolChangedState = true;
            }
            return false;
        });

        $("#btnOutUndo").click(function (event) {
            event.preventDefault();
            // Getting selected player and inning IDs
            let selectedPlayerID = selectPlayer.value;
            let selectedInningID = selectInning.value;
            let outs = document.querySelector("#playerOuts").innerHTML
            // Checking if both player and inning are selected
            if (selectedPlayerID === "" || selectedInningID === "") {
                alert("Please select a player and an inning.");
                return;
            }
            if (parseInt(outs) == 0) { alert("Outs are already zero"); return; }
            else {

                let data = { GameID: @ViewBag.GameID, PlayerID: selectedPlayerID, InningID: selectedInningID }
                let player = gameInfoJson.GamePlayers.find(gp => gp.PlayerID == selectedPlayerID).Player
                let score = player.Scores.find(p => p.InningID == selectedInningID && p.GameID == @ViewBag.GameID)
                if (player.Scores.length == 0 || score == undefined) {
                    $.ajax({
                        type: "POST",
                        url: "@Url.Action("NewScoreObject", "Game")",
                        data: data,
                        success: function (data) {
                            let jsonData = JSON.parse(data)
                            jsonData.Out--;
                            player.Scores.push(jsonData)
                            setPlayerScores()
                        },
                        error: function () {
                            alert("ERROR");
                        }
                    });
                }
                else {
                    score.Out--;
                }
                setPlayerScores();
                boolChangedState = true;
            }
            return false;
        });

        $("#btnRun").click(function (event) {
            event.preventDefault();
            // Getting selected player and inning IDs
            let selectedPlayerID = selectPlayer.value;
            let selectedInningID = selectInning.value;

            // Checking if both player and inning are selected
            if (selectedPlayerID === "" || selectedInningID === "") {
                alert("Please select a player and an inning.");
                return;
            }
            else {

                let data = { GameID: @ViewBag.GameID, PlayerID: selectedPlayerID, InningID: selectedInningID }
                let player = gameInfoJson.GamePlayers.find(gp => gp.PlayerID == selectedPlayerID).Player
                let score = player.Scores.find(p => p.InningID == selectedInningID && p.GameID == @ViewBag.GameID)

                if (player.Scores.length == 0 || score == undefined) {
                    $.ajax({
                        type: "POST",
                        url: "@Url.Action("NewScoreObject", "Game")",
                        data: data,
                        success: function (data) {
                            let jsonData = JSON.parse(data)
                        
                            jsonData.Runs++;
                            console.log(jsonData)
                            player.Scores.push(jsonData)
                            setPlayerScores();
                        },
                        error: function () {
                            alert("ERROR");
                        }
                    });
                }
                else {
                    score.Runs++;
                }
                setPlayerScores();
                boolChangedState = true;

            }
            return false;
        });

        $("#btnRunUndo").click(function (event) {
            event.preventDefault();
            // Getting selected player and inning IDs
            let selectedPlayerID = selectPlayer.value;
            let selectedInningID = selectInning.value;
            let runs = document.querySelector("#playerRuns").innerHTML;
            // Checking if both player and inning are selected
            if (selectedPlayerID === "" || selectedInningID === "") {
                alert("Please select a player and an inning.");
                return;
            }
            if (parseInt(runs) == 0) { alert("Runs are already zero"); return; }
            else {

                let data = { GameID: @ViewBag.GameID, PlayerID: selectedPlayerID, InningID: selectedInningID }
                let player = gameInfoJson.GamePlayers.find(gp => gp.PlayerID == selectedPlayerID).Player
                let score = player.Scores.find(p => p.InningID == selectedInningID && p.GameID == @ViewBag.GameID)
                if (player.Scores.length == 0 || score == undefined) {
                    $.ajax({
                        type: "POST",
                        url: "@Url.Action("NewScoreObject", "Game")",
                        data: data,
                        success: function (data) {
                            let jsonData = JSON.parse(data)
                            jsonData.Runs--;
                            player.Scores.push(jsonData)
                            setPlayerScores()
                        },
                        error: function () {
                            alert("ERROR");
                        }
                    });
                }
                else {
                    score.Runs--;
                }
                setPlayerScores();
                boolChangedState = true;
            }
            return false;
        });
       
        document.querySelector("#changeTeam").addEventListener("click", function (event) {
            event.preventDefault();
            let lineupStr = document.querySelector("#TeamLineup").innerHTML;
           
            let data = { id: @ViewBag.GameID, LineupStr: lineupStr == "Home" ? "Away" : "Home" }
            console.log(document.querySelector("#TeamLineup"))
            $.ajax({
                type: "GET",
                url: "@Url.Action("ChangeTeam", "Game")",
                data: data,
                success: function (data) {
                   
                    console.log(data)
                    $("#selectPlayer").empty();
                    for (let i = 0; i < data["$values"].length; i++) {
                        $("#selectPlayer").append(`<option value='${data["$values"][i]["playerID"]}' data-name='${data["$values"][i]["player"]["fullName"]}'>${data["$values"][i]["battingOrder"]} - ${data["$values"][i]["player"]["fullName"]} </option>`);
                    }
                    document.querySelector("#TeamLineup").innerHTML = (document.querySelector("#TeamLineup").innerHTML == "Home") ? "Away" : "Home"

                },
                error: function (xhr) { //Note: xhr is the XMLHttpRequest
                    var errorMessages = [];
                    console.log(data)
                    switch (xhr.status) {
                        case 401:
                            errorMessages.push("You must be logged in first.");
                            break;
                        case 403:
                            errorMessages.push("You are not authorized for this action.");
                            break;
                        default:
                            //Messages coming from the Model State Errors
                            //We split on the | delimeter and the .slice removes the last one
                            errorMessages = xhr.responseText.split("|").slice(0, -1);
                    }

                }
            });
        
        });




  
   
 

        $("#newInning").click(function (event) {
            event.preventDefault();
            if (confirm("Would you like to create a new inning?")) 
            {
                let data = { id: @ViewBag.GameID }
                $.ajax({
                    type: "POST",
                    url: "@Url.Action("NewInning", "Game")",
                    data: data,
                    success: function (data) {
                        console.log(data)
                        var option = document.createElement("option")
                        option.text = data["inningNo"]
                        option.value = data["id"]
                        document.querySelector("#selectInning").add(option);

                    }
                });
            }
           
            return false;
        });
      

        document.querySelector("#selectPlayer").onchange = function (event) {
            var name = event.target.options[event.target.selectedIndex].dataset.name;
            document.getElementById("lblSelectedPlayer").innerHTML = name;
        };
        


       
       


        

        $("#selectPlayer, #selectInning").change(function () {
            // Get the selected player and inning IDs
            let selectedPlayerID = selectPlayer.value;
            let selectedInningID = selectInning.value;
            // Check if both player and inning are selected
            if (selectedPlayerID !== "" && selectedInningID !== "")
                setPlayerScores()
    

                
            return false;
        });

        // SCRIPT ADDED BY RISHI , FOR PHILIP'S REFERENCE

        document.addEventListener("DOMContentLoaded", function () {
            // Disable mouse and keyboard interactions for the players list box
            var selectPlayer = document.getElementById('selectPlayer');
            selectPlayer.addEventListener('mousedown', function (e) {
                e.preventDefault();
            }, false);
            selectPlayer.addEventListener('keydown', function (e) {
                // Prevent scrolling with arrow keys
                if (e.keyCode === 38 || e.keyCode === 40) {
                    e.preventDefault();
                }
            }, false);

            // Disable mouse and keyboard interactions for the innings list box
            var selectInning = document.getElementById('selectInning');
            selectInning.addEventListener('mousedown', function (e) {
                e.preventDefault();
            }, false);
            selectInning.addEventListener('keydown', function (e) {
                // Prevent scrolling with arrow keys
                if (e.keyCode === 38 || e.keyCode === 40) {
                    e.preventDefault();
                }
            }, false);
        });

        //Above code was taken from AI to lock the listboxes , PHILIP - CORRECT IT IF IT'S WRONG

        function changePlayer(step) {
            var select = document.getElementById('selectPlayer');
            var newIndex = select.selectedIndex + step;
            if (newIndex < 0) newIndex = 0;
            if (newIndex >= select.options.length) newIndex = select.options.length - 1;
            select.selectedIndex = newIndex;
            select.dispatchEvent(new Event('change')); // Trigger change event to update dependent data
        }


        function changeInning(step) {
            var select = document.getElementById('selectInning');
            if (select.selectedIndex == select.length - 1 && step>0) {
                if (confirm("Create a new Inning?")) {
                    let data = { id: @ViewBag.GameID }
                    $.ajax({
                        type: "POST",
                        url: "@Url.Action("NewInning", "Game")",
                        data: data,
                        success: function (data) {
                            console.log(data)
                            var option = document.createElement("option")
                            option.text = data["inningNo"]
                            option.value = data["id"]
                            document.querySelector("#selectInning").add(option);

                        }
                    });
                }
            }
            else {
                var newIndex = select.selectedIndex + step;
                if (newIndex < 0) newIndex = 0;
                if (newIndex >= select.options.length) newIndex = select.options.length - 1;
                select.selectedIndex = newIndex;
                select.dispatchEvent(new Event('change')); // Trigger change event to update dependent data
            }

        }

        $("#btnSave").click(function (event) {
            event.preventDefault();
            if (confirm("Would you like to save the current game?")) {
                $.ajax({
                    url: "@Url.Action("UpdateGameInfo", "Game")",
                    type: 'POST',
                    dataType: "json",
                    data: { 'json': JSON.stringify(gameInfoJson) },
                    success: function (data) {

                        boolChangedState = false;
                    }
                });
            }
           
            return false;
        });
        $("#btnReset").click(function (event) {
            event.preventDefault();
            if (confirm("Would you like to reset game state to previous state?")) {
                gameInfoJson =  fetchGameInfo().then(()=>setPlayerScores())
            }
  
        });
        window.addEventListener("beforeunload", function (event) {
            if (!boolChangedState) {
                event.preventDefault();
                event.returnValue = ''; // This line is for older browsers
                alert("You have unsaved changes. Are you sure you want to leave?");
            }
        });
    </script>

}



