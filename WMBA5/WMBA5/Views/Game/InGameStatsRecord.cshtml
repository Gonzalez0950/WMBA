@model WMBA5.Models.Game

@{
    ViewData["Title"] = "Record Game";
}
<link rel="stylesheet" href="css/Layout.css">
<div class="d-flex justify-content-between align-items-center">
    <div class="d-flex align-items-center">
        <div style="margin-right: 10px;">
            <h2>@Html.DisplayFor(model => model.HomeTeam.TeamName) vs @Html.DisplayFor(model => model.AwayTeam.TeamName)</h2>
        </div>
        <button type="button" class="btn btn-info help-btn" id="helpBtn" data-bs-toggle="popover" data-bs-placement="right"
                data-bs-content="<p>1- In the &quot;Score Game&quot; page , you can count the score of the game in real-time.</p>
                       <p>2- You can count hits, runs, home runs, outs, strikes, balls, and fouls in this page.</p>
                       <p>3- You can skip a batter on click of the &quot;Skip Batter&quot; button incase of any injury.</p>
                       <p>4- Innings can be changed by clicking &quot;Next&quot; or &quot;Previous&quot; inning button.<p/>
                       <p>5- You can also save the game once it's over by clicking the &quot;Save&quot; button or incase if the game is cancelled , you can click on the &quot;Reset&quot; button.</p>"
                data-bs-html="true">
            ?
        </button>
    </div>
</div>

<link rel="stylesheet" href="~/css/Layout.css" asp-append-version="true" />
<link rel="stylesheet" href="~/css/GameView.css" asp-append-version="true" />
@* <partial name="_ViewHeading" /> *@

<hr />
<form asp-action="InGameStatsRecord">
    <input type="hidden" value="@ViewBag.GameID" id="gameID" />
    <div class="container-block">
        <div class="sub-container-block field-block">
            <div id="base-block-bat" data-type="0" class="base-block"></div>
            <div id="base-block-one" data-type="1" class="base-block"></div>
            <div id="base-block-two" data-type="2" class="base-block"></div>
            <div id="base-block-three" data-type="3" class="base-block"></div>
        </div>
        <div class="sub-container-block input-block">
            <div class="onfield-block form-block">
                <h3 class="input-header">Players on the Field</h3>
                <div class="form-field">
                    <label class="lblForm" id="lblPlayerAtBat" for="btnPlayerAtBat">Player At Bat:</label>
                    <br />
                    <button class="btnOnField" data-type="0" id="btnPlayerAtBat">Select</button>
                </div>
                <div class="form-field">
                    <label class="lblForm" id="lblBaseOne" for="btnBaseOne">Base One:</label>
                    <br />
                    <button class="btnOnField" data-type="1" id="btnBaseOne">Select</button>
                </div>
                <div class="form-field">
                    <label class="lblForm" id="lblBaseTwo" for="btnBaseTwo">Base Two:</label>
                    <br />
                    <button class="btnOnField" data-type="2" id="btnBaseTwo">Select</button>
                </div>
                <div class="form-field">
                    <label class="lblForm" id="lblBaseThree" for="btnBaseThree">Base Three:</label>
                    <br />
                    <button class="btnOnField" data-type="3" id="btnBaseThree">Select</button>
                </div>
            </div>
            <div class="play-block form-block">
                <h3 class="input-header">Make a Play</h3>
                <select id="select-play" Name="plays" Size="7" class="input-select">
                </select>
                <button class="form-btn btn-confirm"> Confirm Play </button>
            </div>

        </div>
        <div class="sub-container-block score-btn-block">
            <div class="score-block">
                <h3 class="score-header" id="lblTotal">Total Score:</h3>
                <div class="score-sub-block">
                    <div class="score-sub-header"></div>
                    <div class="score-group">
                        <div class="score-field">Hits: <span id="playerHits">0</span></div>
                        <div class="score-field">Balls: <span id="playerBalls">0</span></div>
                    </div>
                    <div class="score-group">
                        <div class="score-field">Strikes: <span id="playerStrikes">0</span></div>
                        <div class="score-field">Outs: <span id="playerOuts">0</span></div>
                    </div>
                    <div class="score-group">
                        <div class="score-field">Runs: <span id="playerRuns">0</span></div>
                        <div class="score-field">Foul Balls: <span id="playerFoulBalls">0</span></div>
                    </div>

                </div>


            </div>
            <div class="btn-block">

                <button id="btnSkip" name="btnSkip" class="btn-state">Skip Batter</button>
                <button id="btnSave" class="btn-state" name="btnSave">Save</button>
                <button id="btnReset" class="btn-state" name="btnReset">Reset</button>
            </div>

        </div>

        <div class="sub-container-block innings-block">
            <div class="innings-sub-block">
                <table class="table-score">
                    <tr>
                        <th>&nbsp</th>
                        <th>1</th>
                        <th>2</th>
                        <th>3</th>
                        <th>4</th>
                        <th>5</th>
                        <th>6</th>
                        <th>7</th>
                        <th>8</th>
                        <th>9</th>
                    </tr>
                    <tr>
                        <td>HOME</td>
                        <td id="home1">0</td>
                        <td id="home2">0</td>
                        <td id="home3">0</td>
                        <td id="home4">0</td>
                        <td id="home5">0</td>
                        <td id="home6">0</td>
                        <td id="home7">0</td>
                        <td id="home8">0</td>
                        <td id="home9">0</td>
                    </tr>
                    <tr>
                        <td>AWAY</td>
                        <td id="away1">0</td>
                        <td id="away2">0</td>
                        <td id="away3">0</td>
                        <td id="away4">0</td>
                        <td id ="away5">0</td>
                        <td id="away6">0</td>
                        <td id="away7">0</td>
                        <td id="away8">0</td>
                        <td id="away9">0</td>
                    </tr>

                </table>
            </div>
            <div class="innings-btn-block">

                <div id="currentInning"></div>
                <button id="btnNext" name="btnNext" class="btn-state"> Next Inning</button>
                <button id="btnPrev" name="btnPrev" class="btn-state">Prev Inning</button>
            </div>

        </div>


    </div>
    </div>


</form>


@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script type="text/javascript">
        function removeOptions(selectElement) {
            var i, L = selectElement.options.length - 1;
            for (i = L; i >= 0; i--) {
                selectElement.remove(i);
            }
        }
        let selectedOnfield = {}

        let boolChangedState = false;
        let checkGameState = () => {
            let team = gameInfoJson.GamePlayers.filter(gp => gp.TeamLineup === 0);
            let totalOuts = 0;

            team.forEach(gamePlayer => {

                if (gamePlayer.Player.Scores.length != 0) {
                    playerOuts = gamePlayer.Player.Scores.reduce((total, score) => {
                        if (score?.InningID == gameInfoJson.CurrentInningID) {
                            total = total + score.StrikeOuts + score.GroundOuts + score.FlyOuts
                        }

                        return total;
                    }, 0);


                }

                totalOuts += playerOuts;

            })
            if (totalOuts >= 3) {
                nextInning();
            }

        }
        async function fetchGameInfo() {
            try {
                var data = await (async () => {
                    return new Promise((resolve, reject) => {
                        let data = { id: @ViewBag.GameID};
                        $.ajax({
                            type: "GET",
                            url: "@Url.Action("GetGameInfo", "Game")",
                            data: data,
                            success: function (data) {
                                resolve(data);
                            },
                            error: function (xhr) {
                                var errorMessages = [];
                                switch (xhr.status) {
                                    case 401:
                                        errorMessages.push("You must be logged in first.");
                                        break;
                                    case 403:
                                        errorMessages.push("You are not authorized for this action.");
                                        break;
                                    default:
                                        errorMessages = xhr.responseText.split("|").slice(0, -1);
                                }
                                reject(errorMessages);
                            }
                        });
                    });
                })()

                var jsonData = JSON.parse(data);
                if (jsonData.PlayerAtBatID == undefined || jsonData.PlayerAtBatID == null) {
                    jsonData.PlayerAtBatID = jsonData.GamePlayers.find(gp => gp.BattingOrder == 1 && gp.TeamLineup == 0).PlayerID
                }
                gameInfoJson = jsonData; // Assign the resolved data to the variable
                if (gameInfoJson.CurrentInningID == null) gameInfoJson.CurrentInningID = @ViewBag.CurrentInning
                    setPlayersOnField();
                setPlayerScores();
              
            } catch (error) {
                console.error(error); // Handle errors if any
            }
        }
        async function fetchInningsInfo() {
            try {
                var data = await (async () => {
                    return new Promise((resolve, reject) => {
                        let data = { id: @ViewBag.GameID};
                        $.ajax({
                            type: "GET",
                            url: "@Url.Action("GetGameInnings", "Game")",
                            data: data,
                            success: function (data) {
                                console.log(data)
                                resolve(data);
                            },
                            error: function (xhr) {
                                var errorMessages = [];
                                switch (xhr.status) {
                                    case 401:
                                        errorMessages.push("You must be logged in first.");
                                        break;
                                    case 403:
                                        errorMessages.push("You are not authorized for this action.");
                                        break;
                                    default:
                                        errorMessages = xhr.responseText.split("|").slice(0, -1);
                                }
                                reject(errorMessages);
                            }
                        });
                    });
            
                })()

                inningsInfoJson = data.$values; // Assign the resolved data to the variable
                setInnings();
            } catch (error) {
                console.error(error); // Handle errors if any
            }
        }
        let selectRuns = document.querySelector("#selectRuns")
        let selectInning = document.querySelector("#selectInning")
        let selectPlayer = document.querySelector("#selectPlayer")

        let nextPlayer = () => {
            let team = gameInfoJson.GamePlayers.filter(gp => gp.TeamLineup === 0);
            let currentBattingOrder = team.find(gp => gp.PlayerID == gameInfoJson.PlayerAtBatID).BattingOrder;
            let nxtBattingOrder = currentBattingOrder + 1;
            if (nxtBattingOrder >= team.length) { nxtBattingOrder = 1; }
            gameInfoJson.PlayerAtBatID = gameInfoJson.GamePlayers.find(gp => gp.BattingOrder == nxtBattingOrder).PlayerID;
        }
        let nextInning = () => {

            event.preventDefault(); let input;
            do {
                input = prompt("Please enter the number of runs for the away team");
                if (isNaN(Number(input))) {
                    alert("Please enter a valid number");
                }
            } while (isNaN(Number(input)));

            if (input !== null) {

                let data = { GameID: @ViewBag.GameID, InningID: gameInfoJson.CurrentInningID, score: parseInt(input) };
                if (confirm("Warning: Moving on to the next inning will save the game state")) 
                {
                    let inning = gameInfoJson.Innings.find(i => i.ID == gameInfoJson.CurrentInningID);
                    inning.AwayRuns = parseInt(input);
                    console.log(inning, gameInfoJson.Innings.find(i => i.ID == gameInfoJson.CurrentInningID));
                    $.ajax({
                        url: "@Url.Action("UpdateGameInfo", "Game")",
                        type: 'POST',
                        dataType: "json",
                        data: { 'json': JSON.stringify(gameInfoJson) },
                        success: function (data) {



                            console.log(data)
                            boolChangedState = false;

                        }
                    })
                        .then(() => {
                            $.ajax({
                                url: "@Url.Action("UpdateGameInfo", "Game")",
                                type: 'POST',
                                dataType: "json",
                                data: { 'json': JSON.stringify(gameInfoJson) },
                                success: function (data) {
                                    let nextInningNumber = parseInt(inning.InningNo.substring(7)) + 1;
                                    let nextInningString = `Inning ${nextInningNumber}`;
                                    let nextInning = inningsInfoJson.find(i => i.inningNo == nextInningString);

                                    gameInfoJson.CurrentInningID = nextInning.id;
                                    gameInfoJson.CurrentInning = nextInning;
                                    console.log(data)
                                    boolChangedState = false;
                                    gameInfoJson = fetchGameInfo().then(() => {
                                        inningsInfoJson = fetchInningsInfo();
                                        return inningsInfoJson
                                    }).then((data) => {

                                        setInnings();
                                    });
                                }
                            })
                        })
                }
            }

            return false;

        }
        let setInnings = () => {
   
            let innings = inningsInfoJson;
          // /*   console.log(innings, inningsInfoJson.find(i => i.id == gameInfoJson.CurrentInningID) */.inningNo);
            document.querySelector("#currentInning").innerHTML = inningsInfoJson.find(i => i.id == gameInfoJson.CurrentInningID).inningNo;
            let i = 1;
            inningsInfoJson.forEach((inning) => {
              
                document.querySelector(`#away${i}`).innerHTML = inning?.awayRuns == null ? 0 : inning.awayRuns;
                let inningScore = inning?.scores?.$values.reduce((total, score) => {
                    // Add the total runs to each score object

                    total = total + score?.runs
                    return total;
                }, 0);
                // console.log(inning)
                document.querySelector(`#home${i}`).innerHTML = inningScore? inningScore : 0;
                i++;
                // console.log(inningScore)
            })
 
        }
      
        let setPlayersOnField = () => {
            let currentInning = gameInfoJson.Innings.find(i => i.ID == gameInfoJson.CurrentInningID)?.InningNo
            let playerAtBat = gameInfoJson.GamePlayers.find(gp => gp.PlayerID == gameInfoJson.PlayerAtBatID)
            let playerBaseOne = gameInfoJson.GamePlayers.find(gp => gp.PlayerID == gameInfoJson.Runners.find(r => r.Base == 1).PlayerID)
            let playerBaseTwo = gameInfoJson.GamePlayers.find(gp => gp.PlayerID == gameInfoJson.Runners.find(r => r.Base == 2).PlayerID)
            let playerBaseThree = gameInfoJson.GamePlayers.find(gp => gp.PlayerID == gameInfoJson.Runners.find(r => r.Base == 3).PlayerID)



            document.querySelector("#base-block-bat").innerHTML = playerAtBat == undefined ? "" : playerAtBat.Player.JerseyNumber
            document.querySelector("#base-block-one").innerHTML = playerBaseOne == undefined ? "" : playerBaseOne.Player.JerseyNumber
            document.querySelector("#base-block-two").innerHTML = playerBaseTwo == undefined ? "" : playerBaseTwo.Player.JerseyNumber
            document.querySelector("#base-block-three").innerHTML = playerBaseThree == undefined ? "" : playerBaseThree.Player.JerseyNumber

            document.querySelector("#base-block-bat").hidden = playerAtBat == undefined ? true : false;
            document.querySelector("#base-block-one").hidden = playerBaseOne == undefined ? true : false;
            document.querySelector("#base-block-two").hidden = playerBaseTwo == undefined ? true : false;
            document.querySelector("#base-block-three").hidden = playerBaseThree == undefined ? true : false;

            document.querySelector("#base-block-bat").dataset.player = playerAtBat == undefined ? "" : playerAtBat.Player.ID
            document.querySelector("#base-block-one").dataset.player = playerBaseOne == undefined ? "" : playerBaseOne.Player.ID
            document.querySelector("#base-block-two").dataset.player = playerBaseTwo == undefined ? "" : playerBaseTwo.Player.ID
            document.querySelector("#base-block-three").dataset.player = playerBaseThree == undefined ? "" : playerBaseThree.Player.ID

            document.querySelector("#btnPlayerAtBat").innerHTML = playerAtBat == undefined ? "Empty" : playerAtBat.Player.FullName
            document.querySelector("#btnBaseOne").innerHTML = playerBaseOne == undefined ? "Empty" : playerBaseOne.Player.FullName
            document.querySelector("#btnBaseTwo").innerHTML = playerBaseTwo == undefined ? "Empty" : playerBaseTwo.Player.FullName
            document.querySelector("#btnBaseThree").innerHTML = playerBaseThree == undefined ? "Empty" : playerBaseThree.Player.FullName;


            document.querySelector("#btnPlayerAtBat").dataset.player = playerAtBat == undefined ? "" : playerAtBat.Player.ID
            document.querySelector("#btnBaseOne").dataset.player = playerBaseOne == undefined ? "" : playerBaseOne.Player.ID
            document.querySelector("#btnBaseTwo").dataset.player = playerBaseTwo == undefined ? "" : playerBaseTwo.Player.ID
            document.querySelector("#btnBaseThree").dataset.player = playerBaseThree == undefined ? "" : playerBaseThree.Player.ID


            document.querySelector("#btnPlayerAtBat").hidden = playerAtBat == undefined ? true : false;
            document.querySelector("#btnBaseOne").hidden = playerBaseOne == undefined ? true : false;
            document.querySelector("#btnBaseTwo").hidden = playerBaseTwo == undefined ? true : false;
            document.querySelector("#btnBaseThree").hidden = playerBaseThree == undefined ? true : false;

            document.querySelector("#btnPlayerAtBat").disabled = playerAtBat == undefined ? true : false;
            document.querySelector("#btnBaseOne").disabled = playerBaseOne == undefined ? true : false;
            document.querySelector("#btnBaseTwo").disabled = playerBaseTwo == undefined ? true : false;
            document.querySelector("#btnBaseThree").disabled = playerBaseThree == undefined ? true : false;






        }
        let setPlayerScores = () => {
            // // document.querySelector("#currentInning").innerHTML = gameInfoJson.Innings.find(i => i.ID == gameInfoJson.CurrentInningID)?.InningNo
            let selectedPlayerID = selectedOnfield?.player;
            let selectedInningID = gameInfoJson.CurrentInningID;
            let team = gameInfoJson.GamePlayers.filter(gp => gp.TeamLineup === 0);
            document.querySelector("#playerHits").innerHTML = 0
            document.querySelector("#playerBalls").innerHTML = 0
            document.querySelector("#playerRuns").innerHTML = 0
            document.querySelector("#playerStrikes").innerHTML = 0
            document.querySelector("#playerFoulBalls").innerHTML = 0
            document.querySelector("#playerOuts").innerHTML = 0
            if (selectedPlayerID != null) {
                let player = gameInfoJson.GamePlayers.find(gp => gp.PlayerID == selectedPlayerID).Player
                let score = player.Scores.find(p => p.InningID == selectedInningID && p.GameID == @ViewBag.GameID)


                document.querySelector(".score-sub-header").innerHTML = `Score for: ${player.FullName}`
                document.querySelectorAll(".score-group").forEach((scoreGroup) => {
                    scoreGroup.style.display = 'flex';
                })

                if (score == undefined || player.Scores.length == 0) {
                    document.querySelector("#playerHits").innerHTML = 0
                    document.querySelector("#playerBalls").innerHTML = 0
                    document.querySelector("#playerRuns").innerHTML = 0
                    document.querySelector("#playerStrikes").innerHTML = 0
                    document.querySelector("#playerFoulBalls").innerHTML = 0
                    document.querySelector("#playerOuts").innerHTML = 0
                }
                else {
                    document.querySelector("#playerHits").innerHTML = score["Singles"] + score["Doubles"] + score["Triples"];
                    document.querySelector("#playerBalls").innerHTML = score["Balls"]
                    document.querySelector("#playerRuns").innerHTML = score["Runs"]
                    document.querySelector("#playerStrikes").innerHTML = score["Strikes"]
                    document.querySelector("#playerFoulBalls").innerHTML = score["FoulBalls"]
                    document.querySelector("#playerOuts").innerHTML = score["StrikeOuts"] + score["FlyOuts"] + score["GroundOuts"]
                }


            }
            else {
                document.querySelector(".score-sub-header").innerHTML = "Select a Player"
                document.querySelectorAll(".score-group").forEach((scoreGroup) => {
                    scoreGroup.style.display = 'none';
                })

            }
            let totalRuns = 0;
            team.forEach(gamePlayer => {
                let playerScore = 0;
                if (gamePlayer.Player.Scores.filter(s=>s.InningID == gameInfoJson.CurrentInningID).length != 0) {
                    playerScore = gamePlayer.Player.Scores.reduce((total, score) => {
                        // Add the total runs to each score object

                        total = total + score.Runs
                        return total;
                    }, 0);

                }

                totalRuns += playerScore;
            });

            document.querySelector("#lblTotal").innerHTML = `Total Score: ${totalRuns}`;

        }
        let setFormFields = () => {
            if (selectedOnfield.type == null) {
                document.querySelector(".play-block .input-header").innerHTML = "Select a Player"
                document.querySelector("#select-play").hidden = true;
                document.querySelector(".btn-confirm").hidden = true;
                document.querySelector(".btn-confirm").disabled = true;

            }
            else {

                document.querySelector(".play-block .input-header").innerHTML = "Make a Play"
                document.querySelector("#select-play").hidden = false;
                document.querySelector(".btn-confirm").hidden = false;
                document.querySelector(".btn-confirm").disabled = false;
                if (selectedOnfield.type == 0) {
                    var options =
                        [
                            {
                                "text": "Single",
                                "value": "single"
                            },
                            {
                                "text": "Double",
                                "value": "double"
                            },
                            {
                                "text": "Triple",
                                "value": "triple"
                            },

                            {
                                "text": "Ball",
                                "value": "ball"
                            },
                            {
                                "text": "Strike",
                                "value": "strike",
                            },
                            {
                                "text": "Home Run",
                                "value": "homerun",
                            },
                            {
                                "text": "Foul",
                                "value": "foul",
                            }
                        ];
                    var selectBox = document.getElementById('select-play');
                    removeOptions(selectBox);
                    for (var i = 0, l = options.length; i < l; i++) {
                        var option = options[i];
                        selectBox.options.add(new Option(option.text, option.value));
                    }
                }
                else if (selectedOnfield.type == 1) {
                    var options =
                        [
                            {
                                "text": "Go To Second Base",
                                "value": "second"
                            },
                            {
                                "text": "Go To Third Base",
                                "value": "third"
                            },
                            {
                                "text": "Go To Home Base",
                                "value": "home"
                            },
                            {
                                "text": "Fly Out",
                                "value": "flyout"
                            },

                            {
                                "text": "Ground Out",
                                "value": "groundout"
                            }
                        ];
                    var selectBox = document.getElementById('select-play');
                    removeOptions(selectBox);
                    for (var i = 0, l = options.length; i < l; i++) {
                        var option = options[i];
                        selectBox.options.add(new Option(option.text, option.value));
                    }
                }
                if (selectedOnfield.type == 2) {
                    var options =
                        [
                            {
                                "text": "Go To Third Base",
                                "value": "third"
                            },
                            {
                                "text": "Go To Home Base",
                                "value": "home"
                            },
                            {
                                "text": "Fly Out",
                                "value": "flyout"
                            },

                            {
                                "text": "Ground Out",
                                "value": "groundout"
                            }
                        ];
                    var selectBox = document.getElementById('select-play');
                    removeOptions(selectBox);
                    for (var i = 0, l = options.length; i < l; i++) {
                        var option = options[i];
                        selectBox.options.add(new Option(option.text, option.value));
                    }
                }
                else if (selectedOnfield.type == 3) {
                    var options =
                        [
                            {
                                "text": "Go To Home Base",
                                "value": "home"
                            },
                            {
                                "text": "Fly Out",
                                "value": "flyout"
                            },

                            {
                                "text": "Ground Out",
                                "value": "groundout"
                            }
                        ];
                    var selectBox = document.getElementById('select-play');
                    removeOptions(selectBox);
                    for (var i = 0, l = options.length; i < l; i++) {
                        var option = options[i];
                        selectBox.options.add(new Option(option.text, option.value));
                    }
                }
            }
        }
        let gameInfoJson = fetchGameInfo().then(() => { inningsInfoJson = fetchInningsInfo(); })
        let inningsInfoJson;

        setFormFields();
 
        $(".btnOnField").click(function (event) {
            event.preventDefault();
            document.querySelectorAll(".btnOnField").forEach((btn) => {
                btn.disabled = false;
                if (btn == event.target) {
                    btn.disabled = true;
                }
            })
            selectedOnfield = { type: event.target.dataset.type, player: event.target.dataset.player }
            setFormFields()
            setPlayersOnField();
            setPlayerScores();
        })

        $(".base-block").click(function (event) {
            event.preventDefault();
            document.querySelectorAll(".base-block").forEach((btn) => {
                btn.disabled = false;
                if (btn == event.target) {
                    btn.disabled = true;
                }
            })
            selectedOnfield = { type: event.target.dataset.type, player: event.target.dataset.player }
            setFormFields()
            setPlayersOnField();
            setPlayerScores();
        })


        $(".btn-confirm").click(function (event) {
            event.preventDefault();
            let selectedPlayerID = selectedOnfield.player;
            let selectedInningID = gameInfoJson.CurrentInningID

            let dataScore = { GameID: @ViewBag.GameID, PlayerID: selectedPlayerID, InningID: selectedInningID }
            let player = gameInfoJson.GamePlayers.find(gp => gp.PlayerID == selectedPlayerID).Player
            let score = player.Scores.find(p => p.InningID == selectedInningID && p.GameID == @ViewBag.GameID)
            let play = document.querySelector("#select-play").value
            if (player.Scores.length == 0 || score == undefined) {
                $.ajax({
                    type: "POST",
                    url: "@Url.Action("NewScoreObject", "Game")",
                    data: dataScore,
                    success: function (data) {
                        let jsonData = JSON.parse(data)
                        if (play == "single" || play == "double" || play == "triple") {

                            makeHit(jsonData, (play == "single" ? 1 : (play == "double" ? 2 : 3)), selectedPlayerID);

                            ;
                        }
                        else if (play == "foul") {
                            makeFoul(jsonData);
                        }
                        else if (play == "homerun") {
                            makeHomeRun(jsonData, selectedPlayerID);
                            nextPlayer();
                        }
                        else if (play == "ball") {
                            makeBall(jsonData);

                        }
                        else if (play == "strike") {
                            makeStrike(jsonData);

                        }
                        else if (play == "second" || play == "third" || play == "home") {

                            makeMoveBase(jsonData, (play == "second" ? 2 : (play == "third" ? 3 : 4)), selectedPlayerID);

                        }

                        else if (play == "groundout" || play == "flyout") {
                            makeOut(jsonData, play, selectedPlayerID)

                        }
                        player.Scores.push(jsonData)

                        setPlayerScores()
                        setPlayersOnField();

                        boolChangedState = true;
                    },
                    error: function () {
                        alert("ERROR");
                    }
                });
            }
            else {
                if (play == "single" || play == "double" || play == "triple") {

                    makeHit(score, (play == "single" ? 1 : (play == "double" ? 2 : 3)), selectedPlayerID);

                }
                else if (play == "foul") {
                    makeFoul(score);
                }
                else if (play == "homerun") {
                    makeHomeRun(score, selectedPlayerID);
                    nextPlayer();
                }
                else if (play == "ball") {
                    makeBall(score);

                }
                else if (play == "strike") {
                    makeStrike(score);

                }
                else if (play == "second" || play == "third" || play == "home") {

                    makeMoveBase(score, (play == "second" ? 2 : (play == "third" ? 3 : 4)), selectedPlayerID);

                }
                else if (play == "groundout" || play == "flyout") {
                    makeOut(score, play, selectedPlayerID)

                }

                setPlayerScores()
                setPlayersOnField();

                boolChangedState = true;
            }


            resetSelect();
            setFormFields()
        })

        let resetSelect = () => {
            selectedOnfield = {};
            document.querySelectorAll(".btnOnField").forEach((btn) => {
                btn.disabled = false;
            })
            setPlayerScores();
        }

        let hitConditions = (runners, hitValue, selectedPlayerID) => {
            let playerOnField = runners.find(r => r.PlayerID == selectedPlayerID && r.Base == hitValue) ? true : false;
            console.log(runners.find(r => r.PlayerID == selectedPlayerID && r.Base == hitValue))
            if (playerOnField) return { errorMsg: "Player is already on the field", hitBool: false };

            let checkPrevBases = runners.filter(r => r.Base <= hitValue)
            for (let base of checkPrevBases) {
                if (base != null && base.PlayerID != null)
                    return { errorMsg: `Base ${base.Base} is already occupied by player ${gameInfoJson.GamePlayers.find(gp => gp.PlayerID == base.PlayerID).Player.FullName}; Players can only occupy empty bases and has to be before the last occupied base`, hitBool: false };
            }
            return { errorMsg: "No error", hitBool: true }
        }
        let moveBaseConditions = (runners, baseValue, selectedPlayerID) => {
           
            console.log(baseValue   )
            if (baseValue != 4) {
                let checkNextBases = runners.filter(r => r.Base <= baseValue && r.PlayerID != selectedPlayerID)
                for (let base of checkNextBases) {
                    if (base != null && base.PlayerID != null)
                        return { errorMsg: `Base ${base.Base} is already occupied by player ${gameInfoJson.GamePlayers.find(gp => gp.PlayerID == base.PlayerID).Player.FullName}; Players can only occupy empty bases and has to be before the last occupied base`, hitBool: false };
                }
            }
            else {
                let checkNextBases = runners.filter(r => r.Base <= baseValue && r.PlayerID != selectedPlayerID && r.Base > runners.find(r=>r.PlayerID == selectedPlayerID).Base)
                console.log(checkNextBases, runners.find(r => r.PlayerID == selectedPlayerID).Base)
                for (let base of checkNextBases) {
                    if (base != null && base.PlayerID != null)
                        return { errorMsg: `Base ${base.Base} is occupied by player ${gameInfoJson.GamePlayers.find(gp => gp.PlayerID == base.PlayerID).Player.FullName}; Players cannot go to home base unless the next bases are not occupied`, hitBool: false };
                }
            }
            
            return { errorMsg: "No error", hitBool: true }
        }


        let makeHit = (score, hitValue, selectedPlayerID) => {
            let runners = gameInfoJson.Runners;
            let results = hitConditions(runners, hitValue, selectedPlayerID)
            if (!results.hitBool) {
                alert(results.errorMsg)
                return;
            }
            if (hitValue == 1)
                score.Singles++;
            else if (hitValue == 2)
                score.Doubles++;
            else if (hitValue == 3)
                score.Triples++;
            let runner = runners.find(r => r.GameID == @ViewBag.GameID && r.Base == hitValue)

            runner.PlayerID = parseInt(selectedPlayerID)
            nextPlayer();

        }
        let makeFoul = (score) => {
            score.FoulBalls++;
            if (score.Strikes < 2) {
                score.Strikes++;
            }
        }
        let makeHomeRun = (score, selectedPlayerID) => {
            let runners = gameInfoJson.Runners.filter(r => r.PlayerID != null);
            let runs = runners.length + 1;
            score.Runs += runs;
            runners.forEach((runner) => {
                runner.PlayerID = null;
            })
        }
        let makeBall = (score) => {
            score.Balls++;
            if (score.Balls % 4 == 0) {

                let baseThree = gameInfoJson.Runners.find(r => r.Base == 3)
                let baseTwo = gameInfoJson.Runners.find(r => r.Base == 2)
                let baseOne = gameInfoJson.Runners.find(r => r.Base == 1)
                if (baseOne?.PlayerID != null) {
                    let baseOnePlayer = gameInfoJson.GamePlayers.find(gp => gp.PlayerID == baseOne.PlayerID).Player;
                    if (baseTwo?.PlayerID != null) {
                        let baseTwoPlayer = gameInfoJson.GamePlayers.find(gp => gp.PlayerID == baseTwo.PlayerID).Player;
                        if (baseThree?.PlayerID != null) {
                            let baseThreePlayer = gameInfoJson.GamePlayers.find(gp => gp.PlayerID == baseThree.PlayerID).Player;
                            let baseThreeScore = baseThreePlayer.Scores.find(s => s.InningID == gameInfoJson.CurrentInningID)
                            baseThreeScore.Runs += 1;
                            baseThree.PlayerID = null;
                        }
                        baseThree.PlayerID = baseTwoPlayer.ID
                    }
                    baseTwo.PlayerID = baseOnePlayer.ID
                }




                baseOne.PlayerID = gameInfoJson.PlayerAtBatID
                nextPlayer();
            }
        }
        let makeStrike = (score) => {
            score.Strikes++;
            checkGameState()
            if (score.Strikes % 3 == 0) {
                score.StrikeOuts++;
                nextPlayer();
            }
        }
        let makeMoveBase = (score, baseValue, selectedPlayerID) => {
            let runners = gameInfoJson.Runners;
            let results = moveBaseConditions(runners, baseValue, selectedPlayerID)
            if (!results.hitBool) {
                alert(results.errorMsg)
                return;
            }
            if (baseValue < 4) {
                runners.find(r => r.PlayerID == selectedPlayerID).PlayerID = null;
                runners.find(r => r.Base == baseValue).PlayerID = selectedPlayerID
            }
            else if (baseValue == 4) {
                console.log(baseValue, runners.find(r => r.PlayerID == selectedPlayerID))
                score.Runs++;
                runners.find(r => r.PlayerID == selectedPlayerID).PlayerID = null;
            }
        }
        let makeOut = (score, type, selectedPlayerID) => {
            let runners = gameInfoJson.Runners;
            runners.find(r => r.PlayerID == selectedPlayerID).PlayerID = null;
            if (type == "flyout") {
                score.FlyOuts++;
            }
            else (type == "groundout")
            {
                score.GroundOuts++;
            }
            checkGameState();
        }















        $("#btnSave").click(function (event) {
            event.preventDefault();
            if (confirm("Would you like to save the current game?")) {
                $.ajax({
                    url: "@Url.Action("UpdateGameInfo", "Game")",
                    type: 'POST',
                    dataType: "json",
                    data: { 'json': JSON.stringify(gameInfoJson) },
                    success: function (data) {
                        console.log(data)
                        boolChangedState = false;
                    }
                });
            }

            return false;
        });
        $("#btnReset").click(function (event) {
            event.preventDefault();
            if (confirm("Would you like to reset game state to previous state?")) {
                gameInfoJson = fetchGameInfo().then(() => setPlayerScores())
            }

        });
        $("#btnSkip").click(function (event) {
            event.preventDefault();
            if (confirm("Would you like to skip to next batter?")) {
                nextPlayer();
                resetSelect();
                setPlayerScores()
                setPlayersOnField();

                setFormFields()
            }

        });
        $("#btnNext").click(function (event) {
            event.preventDefault();
            if (gameInfoJson.CurrentInning.awayRuns == null) {
                let input;
                do {
                    input = prompt("Please enter the number of runs for the away team");
                    if (input !== null && isNaN(Number(input))) {
                        alert("Please enter a valid number");
                    }
                } while (input !== null && isNaN(Number(input)));

                if (input !== null) {
                    let inning = gameInfoJson.Innings.find(i => i.ID == gameInfoJson.CurrentInningID);
                    inning.AwayRuns = parseInt(input);
                    console.log(inning, gameInfoJson.Innings.find(i => i.ID == gameInfoJson.CurrentInningID));
                    $.ajax({
                        url: "@Url.Action("UpdateGameInfo", "Game")",
                        type: 'POST',
                        dataType: "json",
                        data: { 'json': JSON.stringify(gameInfoJson) },
                        success: function (data) {


                            let nextInningNumber = parseInt(inning.InningNo.substring(7)) + 1;
                            let nextInningString = `Inning ${nextInningNumber}`;
                            let nextInning = gameInfoJson.Innings.find(i => i.InningNo == nextInningString);
                            console.log(nextInning, nextInning.id)
                            gameInfoJson.CurrentInningID = nextInning.ID;
                            gameInfoJson.CurrentInning = nextInning;
                            console.log(data)
                            boolChangedState = false;
                            
                        }
                     })
                    .then(()=>{
                        $.ajax({
                            url: "@Url.Action("UpdateGameInfo", "Game")",
                            type: 'POST',
                            dataType: "json",
                            data: { 'json': JSON.stringify(gameInfoJson) },
                            success: function (data) {
                                  
                                console.log(data)
                                boolChangedState = false;

                                gameInfoJson = fetchGameInfo().then(() => {
                                    inningsInfoJson = fetchInningsInfo();
                                    return inningsInfoJson
                                }).then((data) => {

                                    setInnings();
                                });
                            }
                        })
                    })
                
                }
            }
            else {
                let inning = gameInfoJson.Innings.find(i => i.ID == gameInfoJson.CurrentInningID);
                inning.awayRuns = parseInt(input);
                let nextInningNumber = parseInt(inning.InningNo.substring(7)) + 1;
                let nextInningString = `Inning ${nextInningNumber}`;
                let nextInning = inningsInfoJson.find(i => i.inningNo == nextInningString);
                gameInfoJson.CurrentInningID = nextInning.id;
                console.log(nextInning, nextInningString)
                gameInfoJson.CurrentInning = nextInning;
                let data = { GameID: @ViewBag.GameID, InningID: gameInfoJson.CurrentInningID }
                $.ajax({
                    url: "@Url.Action("UpdateGameInfo", "Game")",
                    type: 'POST',
                    dataType: "json",
                    data: { 'json': JSON.stringify(gameInfoJson) },
                    success: function (data) {
                        console.log(data)
                        boolChangedState = false;
                        gameInfoJson = fetchGameInfo().then(() => {
                            inningsInfoJson = fetchInningsInfo();
                            return inningsInfoJson
                        }).then((data) => {

                            setInnings();
                        });
                    }
                });
            }
            return false;
        });
        window.addEventListener("beforeunload", function (event) {
            if (boolChangedState) {
                event.preventDefault();
                event.returnValue = ''; // This line is for older browsers
                alert("You have unsaved changes. Are you sure you want to leave?");
                return true
            }
            else {
                return null
            }
        });


        // Initialize popover with trigger set to 'hover'
        var popoverTriggerListHover = [].slice.call(document.querySelectorAll('[data-bs-toggle="popover"]'))
        var popoverListHover = popoverTriggerListHover.map(function (popoverTriggerEl) {
            return new bootstrap.Popover(popoverTriggerEl, {
                trigger: 'hover' // Show popover on hover
            });
        });

        // Initialize popover with trigger set to 'click'
        var popoverTriggerListClick = [].slice.call(document.querySelectorAll('[data-bs-toggle="popover"]'))
        var popoverListClick = popoverTriggerListClick.map(function (popoverTriggerEl) {
            return new bootstrap.Popover(popoverTriggerEl, {
                trigger: 'click' // Show popover on click
            });
        });
    </script>

}
