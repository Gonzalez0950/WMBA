@model WMBA5.Models.Game

@{
    ViewData["Title"] = "Record Game";
}
@* <partial name="_ViewHeading" /> *@
<h2>@Html.DisplayFor(model => model.HomeTeam.TeamName) vs @Html.DisplayFor(model => model.AwayTeam.TeamName)</h2>
<hr />
<form asp-action="InGameStatsRecord"  >  
    <input type="hidden" value="@ViewBag.GameID" id="gameID" />
    <table class="table">
        <tbody>
            <tr>
                <td>
                    <table>
                        <tbody>
                            <tr>
                                <td>
                                    <button id="btnHit" name="btnHit" > Hit </button>
                                    <br />
                                    <label id="lblBall" for="btnBall">Balls: </label>
                                    <br />
                                    <button id="btnBall" name="btnBall">+</button>
                                </td>
                                <td>
                                    <select class="form-control">
                                        <option value="single">Single</option>
                                        <option value="double">Double</option>
                                        <option value="triple">Triple</option>
                                        <option value="homeRun">HomeRun</option>
                                    </select>
                                </td>
                                <td>
                                    <label id="lblStrike" for="btnStrike">Strikes: </label>
                                    <br />
                                    <button id="btnStrike" name="btnStrike">+</button>
                                    <br />
                                    <label id="lblOut" for="btnOut">Outs: </label>
                                    <br />
                                    <button id="btnOut" name="btnOut">+</button>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                    <button id="btnSave" name="btnSave">Save</button>
                    <br />
                    <button id="btnCancel" name="btnCancel">Cancel</button>
                </td>
                <td>
                    <div>
                        <label id="lblPlayer" for="selectPlayer" class="fw-bold">Players</label>
                        <br />
                        <select id="selectPlayer" Name="players" Size="10">
                            @foreach (var item in Model.GamePlayers
                            .Where(gp => gp.TeamLineup == TeamLineup.Home)
                            .OrderBy(o => o.Player.LastName))
                            {
                                <option value = "@item.PlayerID">@item.Player.FullName</option>
                                <br />
                            }
                        </select>
                    </div>
                </td>
                <td>
                    <div>
                        <label id="lblInning" for="selectInning" class="fw-bold">Innings</label>
                      
                        <select id="selectInning" Name="innings" Size="9">
                            @foreach (var item in ViewBag.Innings)
                            {
                                <option value="@item.ID">@item.InningNo</option>
                                <br />
                            }
                        </select>
                        <br />
                        <label id="lblTotal">Total:</label>
                    </div>
                </td>
            </tr>
        </tbody>
    </table>
</form>


@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
<script type="text/javascript">
        
        let selectInning = document.querySelector("#selectInning")
        let selectPlayer = document.querySelector("#selectPlayer")



        let btnHit = document.querySelector("#btnHit")
        let btnBall = document.querySelector("#btnBall")
        let gameID = document.querySelector("#gameID").value;
        $("#btnHit").click(function (event) {
            event.preventDefault();
            // ClearErrors();
            // Getting selected player and inning IDs
            let selectedPlayerID = selectPlayer.value;
            let selectedInningID = selectInning.value;
            // Checking if both player and inning are selected
            if (selectedPlayerID === "" || selectedInningID === "") {
                alert("Please select a player and an inning.");
                return;
            }
            else {
                
                let data = { GameID: @ViewBag.GameID, PlayerID: selectedPlayerID, InningID: selectedInningID, IncrementField: "Hits" }
                $.ajax({
                    type: "POST",
                    url: "@Url.Action("InGameStatsRecord", "Game")",
                    data: data ,
                    success: function () {
                       console.log(data)
                    },
                    error: function (xhr) { //Note: xhr is the XMLHttpRequest
                        var errorMessages = [];
                        console.log(data)
                        switch (xhr.status) {
                            case 401:
                                errorMessages.push("You must be logged in first.");
                                break;
                            case 403:
                                errorMessages.push("You are not authorized for this action.");
                                break;
                            default:
                                //Messages coming from the Model State Errors
                                //We split on the | delimeter and the .slice removes the last one
                                errorMessages = xhr.responseText.split("|").slice(0, -1);
                        }
                        //This checks if there are any elements with some content
                        //and if not then it provides a default feedback message.
                        // if (!errorMessages.some((str) => str !== "")) {
                        //     errorMessages.push("Error: Unable to complete operation");
                        // }
                        // //Put the messages in the ErrorList ul contained in the 'ValidaitonSummary' div.
                        // var ul = document.getElementById("ErrorList");
                        // for (var i = 0; i < errorMessages.length; i++) {
                        //     var errorMessage = errorMessages[i];
                        //     var li = document.createElement("li");
                        //     li.innerHTML = errorMessage;
                        //     ul.appendChild(li);
                        // }
                    }
                });
            }
            return false;
        });


    </script>

}



